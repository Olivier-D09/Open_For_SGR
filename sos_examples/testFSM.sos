testFSM
import "fsm/src/language-server/finite-state-machine.langium"

open FSMModel{
                         when starts
    ------------------------------------------------------ FSMstart
       <this,σ> ~> fsms->parallel.foreach(fsm => <fsm,σ>)

        when lastOf(fsms.terminates)
    -------------------------------------                  FSMend
         <this,σ> ~> terminates

}


open FSM {
    var currentState:State;

                    when starts
    ----------------------------------------- init
     <this,σ> ~> currentState := states.at(0)
}

open Event {

    var isOccuring:event;

            when starts
    --------------------------   fugaceEvent
      <this,σ> ~> terminates    
}

open State {
    var isCurrentState:boolean = false;

            when starts            
    --------------------------------------- init
    <this,σ> ~> isCurrentState := isInitial;

            when starts
    ---------------------------- evaluate
     <this,σ> ~> isCurrentState;
}

open Transition{

    var isSensitive:boolean = false;

            when starts
    --------------------------------------- init
        <this,σ> ~> isSensitive := true;

            

             
      when (guardEvent.terminates) [isSensitive == true]
    ------------------------------------------------------ fire
         <this,σ> ~> source.isCurrentState := false
                     target.isCurrentState := true;
                     isSensitive := false;
                     terminates;


    
        
}