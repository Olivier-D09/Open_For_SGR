testSimpleL
import "testSoSLang/src/language-server/simple-l.langium"



open Model { 


                            //since entry  
    ------------------------------------------------------------ statementsInOrder1
      <this,σ> ~> statements->sequential.foreach(s => <s,σ>);



         when statements.last().terminates;                  
    -------------------------------------------                 finishModel
              <this,σ> ~> ⍊

}

open Bloc {

                          when starts;
    ----------------------------------------------------------- startsBloc
        <this,σ> ~> statements->foreach(s => <s,σ>); ⍊

  
          when statements.last().terminates;             
    -------------------------------------------                 finishBloc
              <this,σ> ~> ⍊
}

open ParallelBloc {

                          when starts;
    ----------------------------------------------------------- startsParallelBloc
        <this,σ> ~> statements->parallel.foreach(s => <s,σ>);



       when lastOf (statements.terminates);
    -----------------------------------------                   finishParallelBloc
                  <this,σ> ~> ⍊

}

open Variable {

    var currentValue;


                when starts;
    ---------------------------------------------               initializeVar
     <this,σ> ~> currentValue = initialValue; ⍊

}

open VarRef {
                when starts;
    -------------------------------------                       accessVarRef
         <this,σ> ~> ref.currentValue;
}

open Plus {
   
    <right,σ> -> n2:number ; <left,σ> -> n1:number
    ----------------------------------------------              evaluatePlus
             <this,σ> ~> n1 + n2 ; ⍊
}


open If {

              when starts;
              <cond,σ> -> true 
    -----------------------------------                         condTrue
      <this,σ> ~> <then.starts, σ>; ⍊


              when starts;
              <cond,σ> -> false
    -----------------------------------                         condFalse
      <this,σ> ~> <else.starts,σ>; ⍊

} 

open Assignment {

          when starts
    --------------------------                                  executeAssignment
      <this,σ> ~> <expr,σ>;


          <expr,σ> -> resRight: number                         
    --------------------------------------------------          executeAssignment2
      <this,σ> ~> variable.currentValue = resRight; ⍊
}

// open Conjunction {
//           when starts                   
//     -------------------------                                   evaluateConjunction
//       <this,σ> ~> <lhs,σ>;

          
//           <lhs,σ> -> true
//     -------------------------                                   evaluateConjunction2
//       <this,σ> ~> <rhs,σ>;


//         <lhs,σ> -> false
//     -------------------------                                   evaluateConjunction3
//       <this,σ> ~> false; ⍊

         
//          <rhs,σ> -> true
//     -------------------------                                   evaluateConjunction4
//       <this,σ> ~> true;  ⍊

// }


open Conjunction {

          when starts;                   
    -------------------------                                   evaluateConjunction
      <this,σ> ~> <lhs,σ> ;   

          
          <lhs,σ> -> true
    -------------------------                                   evaluateConjunction2
      <this,σ> ~> <rhs,σ>;


        <lhs,σ> -> false
    -------------------------                                   evaluateConjunction3
      <this,σ> ~> ⍊ ;

         
         <rhs,σ> -> true
    -------------------------                                   evaluateConjunction4
      <this,σ> ~> true;  ⍊

}