/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export interface FSMModel extends AstNode {
    readonly $type: 'FSMModel';
    states: Array<State>
    transitions: Array<Transition>
}

export const FSMModel = 'FSMModel';

export function isFSMModel(item: unknown): item is FSMModel {
    return reflection.isInstance(item, FSMModel);
}

export interface State extends AstNode {
    readonly $container: FSMModel;
    readonly $type: 'State';
    isInitial: boolean
    name: string
}

export const State = 'State';

export function isState(item: unknown): item is State {
    return reflection.isInstance(item, State);
}

export interface Transition extends AstNode {
    readonly $container: FSMModel;
    readonly $type: 'Transition';
    event: string
    name: string
    source: Reference<State>
    target: Reference<State>
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface FiniteStateMachineAstType {
    FSMModel: FSMModel
    State: State
    Transition: Transition
}

export class FiniteStateMachineAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['FSMModel', 'State', 'Transition'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Transition:source':
            case 'Transition:target': {
                return State;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'FSMModel': {
                return {
                    name: 'FSMModel',
                    mandatory: [
                        { name: 'states', type: 'array' },
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            case 'State': {
                return {
                    name: 'State',
                    mandatory: [
                        { name: 'isInitial', type: 'boolean' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new FiniteStateMachineAstReflection();
