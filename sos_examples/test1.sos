test1
import "testSoSLang/src/language-server/simple-l.langium"

open non atomic rule Statement {

}

open non atomic rule Model {
    sched { startEvaluation coincides_with statements.startEvaluation}
    sched { finishEvaluation coincides_with statements.finishEvaluation}
    sched foreach i in [0; statements.length()[ {
        statements.at(i).finishEvaluation precedes statements.at(i+1).startEvaluation 
    }
}

open atomic rule VarDecl {

    var currentValue:number = initialValue

rwr 
    --------------------------- getCurrentValue
     <this,σ> ~> currentValue

}

open atomic rule Plus {
   
rwr    <right,σ> -> n2 ; <left,σ> -> n1
    ---------------------------------------------- plusRWR
                <this,σ> ~> n1 + n2 
}


open non atomic rule If {
    sched {startEvaluation coincides_with evalCond}
    sched {evalCond precedes (condTrue or condFalse)}


rwr    <cond,σ> -> resCond
    ------------------------ evalCond
       <this,σ> ~> resCond


rwr    <cond,σ> -> true
    ------------------------ condTrue
      <this,σ> ~> <then,σ>


rwr    <cond,σ> -> false
    ------------------------ condFalse
      <this,σ> ~> <else,σ>

}
