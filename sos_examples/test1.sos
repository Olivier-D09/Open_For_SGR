test1
import "testSoSLang/src/language-server/simple-l.langium"

open non atomic rule Statement {

}

open non atomic rule Model {

    var test: Statement //TODO add all AbstractElement in the scope

    sched { startEvaluation coincides_with statements.first().startEvaluation}
    sched { finishEvaluation coincides_with statements.last().finishEvaluation}
    sched foreach i in [0; statements.length() -1[ {
        statements.at(i).finishEvaluation precedes statements.at(i+1).startEvaluation 
    }
}

open atomic rule VarDecl {

    var currentValue:number = initialValue

rwr  
    --------------------------- getCurrentValue
     <this,σ> ~> currentValue

}

open atomic rule Plus {
   
rwr    <right,σ> -> n2:number ; <left,σ> -> n1:number
    ---------------------------------------------- plusRWR
                <this,σ> ~> n1 + n2 
}


open non atomic rule If {
    sched {startEvaluation coincides_with evalCond}
    sched {evalCond precedes (condTrue xor condFalse)}


rwr    <cond,σ> -> resCond:boolean
    ------------------------ evalCond
       <this,σ> ~> resCond


rwr    <cond,σ> -> true
    ------------------------ condTrue
      <this,σ> ~> <then,σ>


rwr    <cond,σ> -> false
    ------------------------ condFalse
      <this,σ> ~> <else,σ>

}
