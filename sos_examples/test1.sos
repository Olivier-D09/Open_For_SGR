testSimpleL
import "testSoSLang/src/language-server/simple-l.langium"



open Model { 

      <statements,σ> -> ⍊
    ------------------------- statementsInOrder1
         <this,σ> ~> ⍊

}

open Bloc {

      <statements,σ> -> ⍊
    ----------------------- statementsInOrder2
        <this,σ> ~> ⍊
}

open ParallelBloc {

      parallel <statements,σ> -> ⍊
    -------------------------------- statementsInOrder2
            <this,σ> ~> ⍊
}

open VarDecl {

    var start: event;
    var currentValue:number = initialValue;

            when start;
    ----------------------------- evaluate
     <this,σ> ~> currentValue = initialValue; ⍊

}

open VarRef {
      
    --------------------------- evaluate
         <this,σ> ~> ref.currentValue;
}

open Plus {
   
    <right,σ> -> n2:number ; <left,σ> -> n1:number
    ---------------------------------------------- evaluate
                 <this,σ> ~> n1 + n2 ; ⍊
}


open If {

       <cond,σ> -> true 
    ---------------------- condTrue
     <this,σ> ~> <then,σ>; ⍊ 


       <cond,σ> -> false
    ---------------------- condFalse
     <this,σ> ~> <else,σ>; ⍊

} 

open Assignment {
          <right,σ> -> resRight: number                         //here we cannot know the type. inference must be improved to avoid void type
    ----------------------------------------------- evaluate
      <this,σ> ~> left.currentValue = resRight; ⍊
}
