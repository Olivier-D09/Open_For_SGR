testSimpleL
import "testSoSLang/src/language-server/simple-l.langium"



open Model { 


                            when starts; 
    -------------------------------------------------------------------- statementsInOrder1
      <this,σ> ~> ! statements->sequential.foreach(s => <s.starts ,σ>);



         when statements.last().terminates;                  //change to "when lastOf(<statements,σ>.terminates)" ?
    -------------------------------------------stopModel
              <this,σ> ~> ⍊

}

open Bloc {

                          when starts;
    ----------------------------------------------------------- statementsInOrder2
        <this,σ> ~> ! statements->foreach(s => <s.starts,σ>); ⍊
}

open ParallelBloc {

                          when starts;
    ----------------------------------------------------------- statementsInParallel
        <this,σ> ~> ! statements->parallel.foreach(s => <s.starts,σ>); ⍊
}

open VarDecl {

    var currentValue:number = initialValue;

            when starts;
    ----------------------------- evaluate
     <this,σ> ~> currentValue = initialValue; ⍊

}

open VarRef {
                when starts;
    ------------------------------------- evaluate
         <this,σ> ~> ref.currentValue;
}

open Plus {
   
    <right,σ> -> n2:number ; <left,σ> -> n1:number
    ---------------------------------------------- evaluate
                 <this,σ> ~> n1 + n2 ; ⍊
}


open If {

              <cond,σ> -> true 
    ------------------------------------- condTrue
     <this,σ> ~> ! <then.starts, σ>; ⍊


              <cond,σ> -> false
    ----------------------------------- condFalse
     <this,σ> ~> ! <else.starts,σ>; ⍊

} 

open Assignment {
          <right,σ> -> resRight: number                         //here we cannot know the type. inference must be improved to avoid void type
    ----------------------------------------------- evaluate
      <this,σ> ~> left.currentValue = resRight; ⍊
}
