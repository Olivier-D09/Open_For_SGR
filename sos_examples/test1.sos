testSimpleL
import "testSoSLang/src/language-server/simple-l.langium"



open Model { 


                            when starts; 
    ------------------------------------------------------------ statementsInOrder1
      <this,σ> ~> statements->sequential.foreach(s => <s,σ>);



         when statements.last().terminates;                  
    -------------------------------------------                 finishModel
              <this,σ> ~> ⍊

}

open Bloc {

                          when starts;
    ----------------------------------------------------------- startsBloc
        <this,σ> ~> statements->foreach(s => <s,σ>); ⍊

  
          when statements.last().terminates;             
    -------------------------------------------                 finishBloc
              <this,σ> ~> ⍊
}

open ParallelBloc {

                          when starts;
    ----------------------------------------------------------- startsParallelBloc
        <this,σ> ~> statements->parallel.foreach(s => <s,σ>);



       when lastOf (statements.terminates);
    -----------------------------------------                   finishParallelBloc
                  <this,σ> ~> ⍊

}

open VarDecl {

    var currentValue:number = initialValue;


                    when starts;
    ---------------------------------------------               initializeVar
     <this,σ> ~> currentValue = initialValue; ⍊

}

open VarRef {
                when starts;
    -------------------------------------                       accessVarRef
         <this,σ> ~> ref.currentValue;
}

open Plus {
   
    <right,σ> -> n2:number ; <left,σ> -> n1:number
    ----------------------------------------------              evaluatePlus
             <this,σ> ~> n1 + n2 ; ⍊
}


open If {

              when starts;
              <cond,σ> -> true 
    -----------------------------------                         condTrue
      <this,σ> ~> <then.starts, σ>; ⍊


              when starts;
              <cond,σ> -> false
    -----------------------------------                         condFalse
      <this,σ> ~> <else.starts,σ>; ⍊

} 

open Assignment {
          <right,σ> -> resRight: number                         
    -----------------------------------------------             executeAssignment
      <this,σ> ~> left.currentValue = resRight; ⍊
}
